#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

int main() {

	int N;
	cin >> N;
	
	vector<int> v_arr;
	for (int i = 0; i < N; i++) {
		int num;
		cin >> num;
		v_arr.push_back(num);
	}

	sort(v_arr.begin(), v_arr.end());

	double num_sum = 0;
	for (int i = 0; i < N; i++) 
		num_sum += v_arr[i];
	double avg = num_sum / N;
	int rounded_mean;
	if (avg > 0)
		rounded_mean = static_cast<int>(avg + 0.5);
	else
		rounded_mean = static_cast<int>(avg - 0.5);
	cout << rounded_mean << "\n";

	int mid_index = N / 2;
	cout << v_arr[mid_index] << "\n";

	unordered_map<int, int> freq_num;
	vector<int> max_freq_num;
	int max_freq = 0;
	for (int i = 0; i < N; i++)
		freq_num[v_arr[i]]++;
	for (const auto& freq : freq_num) {
		
		if (freq.second > max_freq) {
			max_freq = freq.second;
			max_freq_num.clear();
			max_freq_num.push_back(freq.first);
		}
		else if (freq.second == max_freq)
			max_freq_num.push_back(freq.first);
	}
	if (max_freq_num.size() == 1) 
		cout << max_freq_num[0] << "\n";
	else {
		sort(max_freq_num.begin(), max_freq_num.end());
		cout << max_freq_num[1] << "\n";
	}

	cout << v_arr[N - 1] - v_arr[0] << endl;

	return 0;
}
