from collections import deque


def bfs(start):

    q = deque([start])
    visited = {start}
    last_node = []

    while q:
        cur_level = len(q)
        cur_node = []

        for _ in range(cur_level):
            now = q.popleft()
            cur_node.append(now)

            for child in graph[now]:
                if child not in visited:
                    visited.add(child)
                    q.append(child)

        last_node = cur_node

    return max(last_node)

for tc in range(1, 11):

    N, start = map(int, input().split())
    arr = list(map(int, input().split()))

    graph = [[] for _ in range(101)]
    for i in range(0, N, 2):
        from_node, to_node = arr[i], arr[i+1]
        graph[from_node].append(to_node)

    result = bfs(start)

    print(f'#{tc} {result}')
