#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int N, M;
vector<int> adj[1001];
bool visited[1001];

void bfs(int start) {

	queue<int> q;

	q.push(start);
	visited[start] = true;

	while (!q.empty()) {

		int u = q.front();
		q.pop();

		for (int v : adj[u]) {

			if (!visited[v]) {

				visited[v] = true;
				q.push(v);

			}

		}

	}

}

int main()
{

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;

	for (int i = 0; i < M; i++) {

		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);

	}

	int count = 0;

	for (int i = 1; i <= N; i++) {

		if (!visited[i]) {

			count++;
			bfs(i);
		}

	}

	cout << count << endl;

	return 0;

}
