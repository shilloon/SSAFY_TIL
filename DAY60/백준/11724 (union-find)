#include <iostream>
#include <vector>

using namespace std;

int N, M;
int parent[1001];

int find(int x) {

	if (parent[x] == x) {

		return x;

	}

	return parent[x] = find(parent[x]);
}

bool union_sets(int a, int b) {

	int rootA = find(a);
	int rootB = find(b);

	if (rootA == rootB) {

		return false;

	}

	parent[rootB] = rootA;
	return true;
}


int main() {

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;

	int count = N;

	for (int i = 1; i <= N; i++) {

		parent[i] = i;

	}

	for (int i = 0; i < M; i++) {

		int u, v;
		cin >> u >> v;

		if (union_sets(u, v)) {

			count--;

		}

	}

	cout << count << endl;

	return 0;

}
