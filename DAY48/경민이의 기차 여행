import sys
sys.stdin = open("input.txt", "r")
import heapq
import math

def dijkstra(graph, start):

    all_nodes = set(graph.keys())
    for neighbors in graph.values():
        all_nodes.update(neighbors.keys())

    distances = {v : math.inf for v in all_nodes}

    distances[start] = 0
    min_heap = []
    heapq.heappush(min_heap, [0, start])

    while min_heap:
        cur_distance, cur_vertex = heapq.heappop(min_heap)

        if distances[cur_vertex] < cur_distance : continue

        if cur_vertex not in graph: continue

        for adjacent, weight in graph[cur_vertex].items():
            distance = cur_distance + weight
            if distance < distances[adjacent]:
                distances[adjacent] = distance
                heapq.heappush(min_heap, [distance, adjacent])

    return distances

test_case = int(input())
for tc in range(1, test_case+1):
    N, T = map(int, input().split())

    graph = {}

    for _ in range(T):
        a, b, w = map(int, input().split())

        if a not in graph:
            graph[a] = {}

        graph[a][b] = w

    start_v = 0
    dijkstra_result = dijkstra(graph, start_v)

    if dijkstra_result[N-1] == float('inf'):
        print(f'#{tc} impossible')
    else:
        print(f'#{tc} {dijkstra_result[N-1]}')
