import sys
sys.stdin = open("input.txt", "r")
import heapq
import math

def dijkstra(graph, start):

    all_nodes = set(graph.keys())
    for neighbors in graph.values():
        all_nodes.update(neighbors.keys())

    distances = {v : math.inf for v in all_nodes}

    distances[start] = 0
    min_heap = []
    heapq.heappush(min_heap, [0, start])

    while min_heap:

        cur_distance, cur_vertex = heapq.heappop(min_heap)

        if distances[cur_vertex] < cur_distance : continue

        if cur_vertex not in graph : continue

        for adjacent, weight in graph[cur_vertex].items():
            distance = cur_distance + weight
            if distance < distances[adjacent]:
                distances[adjacent] = distance
                heapq.heappush(min_heap, [distance, adjacent])

    return distances


T = int(input())
for tc in range(1, T+1):

    N, E = map(int, input().split())

    graph = {}
    for _ in range(E):
        s, e, w = map(int, input().split())

        if s not in graph:
            graph[s] = {}

        graph[s][e] = w

    start_v = 0

    dijkstra_result = dijkstra(graph, start_v)

    print(f'#{tc} {dijkstra_result[N]}')
