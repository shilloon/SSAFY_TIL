import sys
sys.stdin = open("input.txt", "r")

def max_subset_profit(honey_list, c):
    max_profit = 0

    # 1일 경우 해당 꿀 사용 0일 경우 사용하지 않음
    for i in range(1, 1 << len(honey_list)):
        total = 0
        profit = 0
        for j in range(len(honey_list)):
            if i & (1 << j):
                total += honey_list[j]
                profit += honey_list[j] ** 2

        if total <= c and profit > max_profit:
            max_profit = profit

    return max_profit

def max_honey(honey, m, c):

    honey_jar = []

    # 부분집합을 이용하여 꿀의 모든 경우의 수와 해당 좌표 구하기
    for i in range(len(honey)):
        for j in range(len(honey)-m+1):
            honey_list = honey[i][j:j+m]
            profit = max_subset_profit(honey_list, c)
            coords = [[i, j+k] for k in range(m)]
            honey_jar.append([profit, coords])

    honey_jar = sorted(honey_jar,key = lambda x: -x[0])

    # 가장 큰 이윤 찾기
    max_profit = 0
    for i in range(len(honey_jar)):
        honey_amount1, coords1 = honey_jar[i]
        for j in range(i+1, len(honey_jar)):
            honey_amount2, coords2 = honey_jar[j]

            set1 = set(map(tuple, coords1))
            set2 = set(map(tuple, coords2))

            if set1 & set2:
                continue

            total = honey_amount1 + honey_amount2
            if total > max_profit:
                max_profit = total

    return max_profit

T = int(input())
for tc in range(1, T+1):
    N, M, C = map(int, input().split())
    honey_matrix = [list(map(int, input().split())) for _ in range(N)]

    result = max_honey(honey_matrix, M, C)

    print(f'#{tc} {result}')
