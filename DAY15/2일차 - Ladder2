# 사다리 도착점까지 이동 
def ladder_location(matrix, visited_matrix, col, row, count):
    dxy = [[0, -1], [0, 1], [1, 0]]

    ni, nj = 0, 0

    # 사다리 이동 로직
    for dy, dx in dxy:

        ni = col + dy
        nj = row + dx

        if 0 <= ni < 100 and 0 <= nj < 100 and visited_matrix[ni][nj] == 0:
            if matrix[ni][nj] == 1:
                count += 1
                visited_matrix[col][row] = 1
                break

    # 도착 지점
    if ni == 99:
        return count

    else:
        return ladder_location(matrix, visited_matrix, ni, nj, count)


for test_case in range(1, 11):

    T = int(input())

    ladder_matrix = [list(map(int, input().split())) for _ in range(100)]

    min_ladder = 10001

    start_point_min = 0

    # 사다리 시작 부분 설정
    for j in range(100):
        if ladder_matrix[0][j] == 1:
            initial_matrix = [[0] * 100 for _ in range(100)]
            ladder_count = 0
            arrival_point = ladder_location(ladder_matrix, initial_matrix, 0, j, ladder_count)

            # 이동 거리 가장 짧은 사다리
            if min_ladder > arrival_point:
                min_ladder = arrival_point
                start_point_min = j

    print(f'#{test_case} {start_point_min}')


