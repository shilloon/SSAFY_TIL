def dfs(row, cnt, battery_use):

    global result

    if result <= battery_use:
        return

    if cnt == N:
        battery = battery_use + battery_matrix[row][0]
        result = min(result, battery)
        return

    for i in range(N):

        if not visited[i]:
            visited[i] = True
            dfs(i, cnt+1, battery_use + battery_matrix[row][i])
            visited[i] = False

T = int(input())
for tc in range(1, T+1):
    N = int(input())

    battery_matrix = [list(map(int, input().split())) for _ in range(N)]
    visited = [False] * N
    result = float('inf')

    visited[0] = True
    dfs(0, 1, 0)

    print(f'#{tc} {result}')
