#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int white_count = 0;
int black_count = 0;

int board[128][128];

bool is_all_same(int row, int col, int size) {

	int start_color = board[row][col];

	for (int i = row; i < row + size; i++) {

		for (int j = col; j < col + size; j++) {

			if (board[i][j] != start_color) {

				return false;

			}

		}

	}

	return true;

}

void solve(int row, int col, int size) {

	if (is_all_same(row, col, size)) {

		if (board[row][col] == 0) {
			white_count++;
		}
		else {
			black_count++;
		}
		return;
	}

	int half = size / 2;

	solve(row, col, half);
	solve(row, col + half, half);
	solve(row + half, col, half);
	solve(row + half, col + half, half);

}

int main() {

	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int N;
	cin >> N;

	for (int i = 0; i < N; i++) {

		for (int j = 0; j < N; j++) {

			cin >> board[i][j];

		}

	}

	solve(0, 0, N);

	cout << white_count << "\n";
	cout << black_count << "\n";

	return 0;

}
