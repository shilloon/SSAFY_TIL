from collections import deque

N, M, V = map(int, input().split())

graph = {i : [] for i in range(1, N+1)}

for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

for adj in graph.values():
    adj.sort()

# DFS (스택)
def dfs(start):
    visited_stack = [False] * (N+1)
    stack = [start]
    result = []

    while stack:
        node = stack.pop()
        if not visited_stack[node]:
            visited_stack[node] = True
            result.append(node)

            for neighbor in reversed(graph[node]):
                if not visited_stack[neighbor]:
                    stack.append(neighbor)

    return result

# BFS
def bfs(start):
    visited_bfs = [False] * (N+1)
    queue = deque([start])
    visited_bfs[start] = True
    result = []

    while queue:
        node = queue.popleft()
        result.append(node)
        for neighbor in graph[node]:
            if not visited_bfs[neighbor]:
                visited_bfs[neighbor] = True
                queue.append(neighbor)
    return result

print(*dfs(V))
print(*bfs(V))
