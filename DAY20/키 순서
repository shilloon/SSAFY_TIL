from collections import deque

def bfs(start, graph, N):
    visited = [False] * (N+1)
    q = deque([start])
    visited[start] = True
    count = 0

    while q:
        node = q.popleft()
        for nxt in graph[node]:
            if not visited[nxt]:
                visited[nxt] = True
                q.append(nxt)
                count += 1

    return count

T = int(input())
for tc in range(1, T+1):
    N = int(input())
    M = int(input())

    graph = [[] for _ in range(N+1)]
    reverse_graph = [[] for _ in range(N+1)]

    for _ in range(M):
        a, b = map(int, input().split())
        graph[a].append(b)
        reverse_graph[b].append(a)

    answer = 0
    for i in range(1, N+1):
        bigger = bfs(i, graph, N)
        smaller = bfs(i, reverse_graph, N)

        if bigger + smaller == N - 1:
            answer += 1

    print(f'#{tc} {answer}')
