from collections import deque


def bfs(x, y, number_grid, visited):

    q = deque()
    q.append((x, y))
    visited[x][y] = True

    while q:
        cx, cy = q.popleft()

        for dx, dy in dxy:
            nx, ny = cx + dx, cy + dy

            if nx < 0 or ny < 0 or nx >= N or ny >= N: continue

            if visited[nx][ny]: continue

            visited[nx][ny] = True
            if number_grid[nx][ny] == 0:
                q.append((nx, ny))


dxy = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]
T = int(input())
for tc in range(1, T+1):
    N = int(input())
    mine_matrix = [list(map(str, input().strip())) for _ in range(N)]

    number_grid = [[0] * N for _ in range(N)]
    visited = [[False] * N for _ in range(N)]
    click_count = 0

    for i in range(N):
        for j in range(N):
            if mine_matrix[i][j] == '*':
                number_grid[i][j] = -1
                for dx, dy in dxy:
                    nx, ny = i + dx, j + dy
                    if nx < 0 or ny < 0 or nx >= N or ny >= N: continue

                    if mine_matrix[nx][ny] == '.':
                        number_grid[nx][ny] += 1

    for i in range(N):
        for j in range(N):
            if number_grid[i][j] != 0: continue

            if visited[i][j]: continue

            bfs(i, j, number_grid, visited)
            click_count += 1

    for i in range(N):
        for j in range(N):
            if number_grid[i][j] <= 0: continue

            if visited[i][j]: continue

            click_count += 1

    print(f'#{tc} {click_count}')
