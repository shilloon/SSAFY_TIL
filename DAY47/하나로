import sys
sys.stdin = open("input.txt", "r")
import heapq


def prim(vertices, adj_list):
    n = len(vertices)
    if n == 0:
        return 0

    visited = set()
    min_heap = [(0, vertices[0])]
    mst_weight = 0
    edges_added = 0

    while min_heap:
        weight, u = heapq.heappop(min_heap)

        if u in visited:
            continue

        visited.add(u)
        mst_weight += weight
        edges_added += 1

        if edges_added == n:
            break

        for v, w in adj_list[u]:
            if v not in visited:
                heapq.heappush(min_heap, (w, v))

    return mst_weight


T = int(input())
for tc in range(1, T+1):
    N = int(input())
    x_list = list(map(int, input().split()))
    y_list = list(map(int, input().split()))
    env_money = float(input())

    adj_list = {i: [] for i in range(N)}
    vertices = list(range(N))

    for i in range(N):
        for j in range(i+1, N):
            dx = x_list[i] - x_list[j]
            dy = y_list[i] - y_list[j]
            dist = (dx * dx) + (dy * dy)
            w = env_money * dist

            adj_list[i].append((j, w))
            adj_list[j].append((i, w))

    min_cost = prim(vertices, adj_list)

    print(f'#{tc} {round(min_cost)}')
